A process is a program that is running, it's also called a job. A thread is a "sequential execution stream" which is fancy talk executable code that runs line by order. Processes contain resources like file handlers, sockets and threads. A process can contain threads but a thread cannot contain a process.
You would prefer to use a resource when you need to run some kind of job or task in parallel that requires some resources (like a socket). This will also ensure safe failover, so if one process fails, only one fails, and not all of them. A thread you would want to prefer when you have to run some computation in parallel that may not need to have individual copies of a resource. This will be a faster solution assume you wrote correct code.
A fork should be used when resources need to be copied and interprocess communication isn't a big deal. Google Chrome for example would use fork to open a new page, but it would individual threads to paint the browser, render the layout, do any network communications, etc. 
