Ian Schweer
22514022
ischweer@uci.edu

CS 131 PART A DESIGN:
--------------------------------------------------------------------------------------
Since each thread will have an even amount of data to begin with we can use a dynamic
programming solution to find the longest palindrome of a string. 

The following is a description of the palindrome algorithm that solves the problem in
O(n^2) time:

findpalindrome:
	given string str
	create a diagonal array X
	for i < length of string
		X[i][i] = 1 (fill the diagonals)
		left = 2
		for left < (length of string)
			for right < (length of string) - left + 1
				if str[left] == str[right] && cl == 2) X[i][j] = 2, save start
				else if (str[left] == str[right]) X[i][j] = L[i+1][j-1] + 2
				else L[i][j] = max(L[i][j-1], L[i+1][j])

	return L[0][n-1], start

This method will return the longest palindrome and the starting index. Now that
each thread has the ability to find the longest palindrome, we will iterate over
each line and and feed this algorithm, taking the highest [0] value:

	int longest = -1
	for line in lines
		res = findpalindrome(line)
		if (res[0] > longest)
			store res
			longest = res[0]

This whole process will take O(m * n^2), where m is the chunksize, n is the findpalindrome method.